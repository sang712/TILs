"""
구하는 공식을 찾아냄
n번째 수를 만드는 경우의 수를 Pn 이라고 하고
Pn 중 1로 끝내면서 만드는 경우의 수를 Pn1,
... Pn3까지 하면
Pn1 = P(n-1)1 + P(n-1)2 + P(n-1)3
Pn2 = P(n-2)2 + P(n-2)3
Pn3 = P(n-3)3
이고

이 떄 Pn = Pn1 + Pn2 + Pn3 이니까 이를 이용하면 다음과 같이 도출할 수 있음
Pn1 = P(n-1)1 + P(n-1)2 + P(n-1)3 = P(n-1)
Pn2 = P(n-2) - P(n-2)1 = P(n-2) - P(n-3)
Pn3 = P(n-3) - P(n-3)1 - P(n-3)2 = P(n-3) - P(n-4) - P(n-3)2 = P(n-3) - P(n-4) - (P(n-5) - P(n-6))
    = P(n-3) - P(n-4) - P(n-5) + P(n-6)
정리하면
Pn = P(n-1) + P(n-2) - P(n-3) + P(n-3) - P(n-4) - P(n-5) + P(n-6) 
    = P(n-1) + P(n-2) - P(n-4) - P(n-5) + P(n-6)
그래서 계산할 때 필요한 기본 값이 되는 P1 ~ P6은 직접 계산해서 넣고
P0는 계산의 결과를 맞게 하기 위해 1을 넣음
---- 
위의 방법은 귀납적 방법을 사용한 것이고
선택할 수 있는 가지수가 3가지라는 점에서 착안해
반복문을 응용해서 선택할 수 있는 가지수를 2개로 축소하는 방법을 사용함
예를 들어
반복문을 통해서
3칸을 n번 이동한 후, 남은 거리를 2와 1의 조합의 개수로 표현할 수 있음
이는 2를 최대 몇 번 사용할 수 있는지 + 1 과 같음
이 조합의 수들을 모두 더하면 원하는 결과를 얻을 수 있음
정리하자면 3칸을 선택하는 경우는 반복문으로 선택지 제거
남은 거리를 2칸과 1칸을 선택할 수 있는 경우의 수를 계산하기
python은 시간초과나고 pypy로 960ms 소요되었음

블로그 잘 찾아보면 아래의 식을 시그마로 표현하고
시그마를 벗겨내서 단일 식으로 만들어 풀이한 글이 있음
"""
n = int(input())

ans = 0

while n >= 0:
    ans += (n // 2 + 1) % 1_000_000
    n -= 3
print(ans % 1_000_000)