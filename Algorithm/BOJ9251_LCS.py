'''
LCS 알고리즘을 검색하여 공부한 뒤에 구현하였음
LCS(Longest Common Substring - 최장 공통 부분수열)

구현한 알고리즘은 짧지만 구현하기 위해서는 생각해야할 부분이 많다는 것을 알게 되었고
아무래도 공부한 뒤에 바로 작성한 코드라
나중에 다시 구현하려면 까먹을 수도 있기 때문에 복습을 해야 할 것

구현 과정을 적어보자면
우선 각 문자열의 길이를 크기로 갖는 2차원 리스트를 선언하고 각 값을 0으로 초기화 함
여기에서 구현 방법은 dp이므로 한 칸씩 늘려서 첫 부분들을 0으로 사용하기 편하게 하였음

그리고 2중 for문을 돌면서 각 문자열이 같은지 비교하여 카운팅하는 방법을 사용하였음
이때 dp에서 직전까지 카운팅 된 값에서 1을 더해야 함, 즉 dp[i-1][j-1]의 값에 더하는 것
그 이유는 문자열의 문자가 연속으로 중복되면 카운팅이 중복으로 될 수 있기 때문
둘을 비교했을 때 문자가 다를 경우 직전에 비교한 값들 중 큰 값을 사용함
즉 dp[i][j-1]과 dp[i-1][j] 중 큰 값을 사용한다는 것

그리고 가장 마지막 dp값을 출력하면 답이 됨

if 문으로 N이나 M 중 하나가 0인 경우 그냥 0을 출력하도록 하였더니 30ms 시간을 단축할 수 있었음

'''
string1, string2 = input(), input()

N, M = len(string1), len(string2)

dp = [[0 for _ in range(M+1)] for _ in range(N+1)]

if N == 0 or M == 0:
    pass
else:
    for i in range(N):
        for j in range(M):
            if string1[i] == string2[j]:
                dp[i+1][j+1] = dp[i][j] + 1
            else:
                dp[i+1][j+1] = max(dp[i][j+1], dp[i+1][j])

print(dp[N][M])