"""
병든 나이트가 움직이는 방향은 왼쪽을 제외한 방향이므로 항상 오른쪽으로 움직이는 것은 자명함
그렇다면 가로 길이가 이동 횟수에 가장 큰 영향을 미칠 것이고
나이트의 움직임 특성상 높이가 3은 되어야 4가지 이동방식을 모두 사용할 수 있음
4번의 움직임을 초과했을 경우에는 4가지 이동 방식을 한번씩은 사용해야하므로
높이가 1인 경우는 답이 1로 고정되고, 높이가 2인 경우는 경우에 따라 1~4로 고정이 됨
높이가 3이상인 경우부터는 완전히 가로길이에 따라 횟수가 결정되고
가로길이가 6 미만일 때는 1~4로 고정이 되고, 6부터 가로길이-2 로 고정이 됨
그 이유는 가로로는 한칸씩만 움직여야 가장 많은 칸을 돌아다닐 수 있는데
여기서 4가지 방향을 모두 이용해야한다는 패널티로 가로로 2칸을 이동하는 경우가 2번은 꼭 있어야하기 때문
그래서 제한조건 20억은 무시하고 그냥 분기 처리로 문제를 풀면 될 듯
"""
N, M = map(int, input().split())
if N == 1:
    print(1)
elif N == 2:
    if M <= 8:
        print((M + 1) // 2)
    else:
        print(4)
else:
    if M <= 4:
        print(M)
    elif M == 5:
        print(4)
    else:
        print(M - 2)